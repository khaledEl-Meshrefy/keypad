
keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000310  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000394  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f30  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000658  00000000  00000000  000013c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000627  00000000  00000000  00001a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000148  00000000  00000000  00002040  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f1  00000000  00000000  00002188  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000393  00000000  00000000  00002579  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  0000290c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <main>
  64:	0c 94 86 01 	jmp	0x30c	; 0x30c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <isPressedD>:
void resetPinC (int  pinnumber){
	PORTC &=!(1<<pinnumber);
}

void togglePinC (int  pinnumber){
	PORTC ^=(1<<pinnumber);
  6c:	20 b3       	in	r18, 0x10	; 16
  6e:	30 e0       	ldi	r19, 0x00	; 0
  70:	a9 01       	movw	r20, r18
  72:	02 c0       	rjmp	.+4      	; 0x78 <isPressedD+0xc>
  74:	55 95       	asr	r21
  76:	47 95       	ror	r20
  78:	8a 95       	dec	r24
  7a:	e2 f7       	brpl	.-8      	; 0x74 <isPressedD+0x8>
  7c:	ca 01       	movw	r24, r20
  7e:	81 70       	andi	r24, 0x01	; 1
  80:	99 27       	eor	r25, r25
  82:	08 95       	ret

00000084 <setPinD>:
  84:	92 b3       	in	r25, 0x12	; 18
  86:	21 e0       	ldi	r18, 0x01	; 1
  88:	30 e0       	ldi	r19, 0x00	; 0
  8a:	02 c0       	rjmp	.+4      	; 0x90 <setPinD+0xc>
  8c:	22 0f       	add	r18, r18
  8e:	33 1f       	adc	r19, r19
  90:	8a 95       	dec	r24
  92:	e2 f7       	brpl	.-8      	; 0x8c <setPinD+0x8>
  94:	29 2b       	or	r18, r25
  96:	22 bb       	out	0x12, r18	; 18
  98:	08 95       	ret

0000009a <resetPinD>:
  9a:	92 b3       	in	r25, 0x12	; 18
  9c:	21 e0       	ldi	r18, 0x01	; 1
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <resetPinD+0xc>
  a2:	22 0f       	add	r18, r18
  a4:	33 1f       	adc	r19, r19
  a6:	8a 95       	dec	r24
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <resetPinD+0x8>
  aa:	20 95       	com	r18
  ac:	29 23       	and	r18, r25
  ae:	22 bb       	out	0x12, r18	; 18
  b0:	08 95       	ret

000000b2 <getkeypad>:
}

int getkeypad(){
	setPinD(0);
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 42 00 	call	0x84	; 0x84 <setPinD>
	setPinD(1);
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 42 00 	call	0x84	; 0x84 <setPinD>
	setPinD(2);
  c2:	82 e0       	ldi	r24, 0x02	; 2
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 42 00 	call	0x84	; 0x84 <setPinD>
	if (isPressedD(4))
  ca:	84 e0       	ldi	r24, 0x04	; 4
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 36 00 	call	0x6c	; 0x6c <isPressedD>
  d2:	89 2b       	or	r24, r25
  d4:	09 f4       	brne	.+2      	; 0xd8 <getkeypad+0x26>
  d6:	4b c0       	rjmp	.+150    	; 0x16e <getkeypad+0xbc>
	{
		setPinD(0);
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 42 00 	call	0x84	; 0x84 <setPinD>
		resetPinD(1);
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 4d 00 	call	0x9a	; 0x9a <resetPinD>
		resetPinD(2);
  e8:	82 e0       	ldi	r24, 0x02	; 2
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 4d 00 	call	0x9a	; 0x9a <resetPinD>
		
		if (isPressedD(4))
  f0:	84 e0       	ldi	r24, 0x04	; 4
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 36 00 	call	0x6c	; 0x6c <isPressedD>
  f8:	89 2b       	or	r24, r25
  fa:	09 f0       	breq	.+2      	; 0xfe <getkeypad+0x4c>
  fc:	dd c0       	rjmp	.+442    	; 0x2b8 <getkeypad+0x206>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fe:	8f e0       	ldi	r24, 0x0F	; 15
 100:	97 e2       	ldi	r25, 0x27	; 39
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <getkeypad+0x50>
 106:	00 c0       	rjmp	.+0      	; 0x108 <getkeypad+0x56>
 108:	00 00       	nop
			
			return 1;
			
		}
		_delay_ms(40);
		resetPinD(0);
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 4d 00 	call	0x9a	; 0x9a <resetPinD>
		setPinD(1);
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 42 00 	call	0x84	; 0x84 <setPinD>
		resetPinD(2);
 11a:	82 e0       	ldi	r24, 0x02	; 2
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 4d 00 	call	0x9a	; 0x9a <resetPinD>
		
		if (isPressedD(4))
 122:	84 e0       	ldi	r24, 0x04	; 4
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 36 00 	call	0x6c	; 0x6c <isPressedD>
 12a:	89 2b       	or	r24, r25
 12c:	09 f0       	breq	.+2      	; 0x130 <getkeypad+0x7e>
 12e:	c7 c0       	rjmp	.+398    	; 0x2be <getkeypad+0x20c>
 130:	8f e0       	ldi	r24, 0x0F	; 15
 132:	97 e2       	ldi	r25, 0x27	; 39
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <getkeypad+0x82>
 138:	00 c0       	rjmp	.+0      	; 0x13a <getkeypad+0x88>
 13a:	00 00       	nop
			
			
		}
		_delay_ms(40);
		
		resetPinD(0);
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 4d 00 	call	0x9a	; 0x9a <resetPinD>
		resetPinD(1);
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 4d 00 	call	0x9a	; 0x9a <resetPinD>
		setPinD(2);
 14c:	82 e0       	ldi	r24, 0x02	; 2
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 42 00 	call	0x84	; 0x84 <setPinD>
		if (isPressedD(4))
 154:	84 e0       	ldi	r24, 0x04	; 4
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 36 00 	call	0x6c	; 0x6c <isPressedD>
 15c:	89 2b       	or	r24, r25
 15e:	09 f0       	breq	.+2      	; 0x162 <getkeypad+0xb0>
 160:	b1 c0       	rjmp	.+354    	; 0x2c4 <getkeypad+0x212>
 162:	8f e0       	ldi	r24, 0x0F	; 15
 164:	97 e2       	ldi	r25, 0x27	; 39
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <getkeypad+0xb4>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <getkeypad+0xba>
 16c:	00 00       	nop
		
		
		

	}
	if (isPressedD(5))
 16e:	85 e0       	ldi	r24, 0x05	; 5
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 36 00 	call	0x6c	; 0x6c <isPressedD>
 176:	89 2b       	or	r24, r25
 178:	09 f4       	brne	.+2      	; 0x17c <getkeypad+0xca>
 17a:	4b c0       	rjmp	.+150    	; 0x212 <getkeypad+0x160>
	{
		setPinD(0);
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 42 00 	call	0x84	; 0x84 <setPinD>
		resetPinD(1);
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 4d 00 	call	0x9a	; 0x9a <resetPinD>
		resetPinD(2);
 18c:	82 e0       	ldi	r24, 0x02	; 2
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 4d 00 	call	0x9a	; 0x9a <resetPinD>
		
		if (isPressedD(5))
 194:	85 e0       	ldi	r24, 0x05	; 5
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 36 00 	call	0x6c	; 0x6c <isPressedD>
 19c:	89 2b       	or	r24, r25
 19e:	09 f0       	breq	.+2      	; 0x1a2 <getkeypad+0xf0>
 1a0:	94 c0       	rjmp	.+296    	; 0x2ca <getkeypad+0x218>
 1a2:	8f e0       	ldi	r24, 0x0F	; 15
 1a4:	97 e2       	ldi	r25, 0x27	; 39
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <getkeypad+0xf4>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <getkeypad+0xfa>
 1ac:	00 00       	nop
			
			return 4;
			
		}
		_delay_ms(40);
		resetPinD(0);
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 4d 00 	call	0x9a	; 0x9a <resetPinD>
		setPinD(1);
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 42 00 	call	0x84	; 0x84 <setPinD>
		resetPinD(2);
 1be:	82 e0       	ldi	r24, 0x02	; 2
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	0e 94 4d 00 	call	0x9a	; 0x9a <resetPinD>
		
		if (isPressedD(5))
 1c6:	85 e0       	ldi	r24, 0x05	; 5
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 36 00 	call	0x6c	; 0x6c <isPressedD>
 1ce:	89 2b       	or	r24, r25
 1d0:	09 f0       	breq	.+2      	; 0x1d4 <getkeypad+0x122>
 1d2:	7e c0       	rjmp	.+252    	; 0x2d0 <getkeypad+0x21e>
 1d4:	8f e0       	ldi	r24, 0x0F	; 15
 1d6:	97 e2       	ldi	r25, 0x27	; 39
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <getkeypad+0x126>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <getkeypad+0x12c>
 1de:	00 00       	nop
			
			
		}
		_delay_ms(40);
		
		resetPinD(0);
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 4d 00 	call	0x9a	; 0x9a <resetPinD>
		resetPinD(1);
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 4d 00 	call	0x9a	; 0x9a <resetPinD>
		setPinD(2);
 1f0:	82 e0       	ldi	r24, 0x02	; 2
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 42 00 	call	0x84	; 0x84 <setPinD>
		if (isPressedD(5))
 1f8:	85 e0       	ldi	r24, 0x05	; 5
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 36 00 	call	0x6c	; 0x6c <isPressedD>
 200:	89 2b       	or	r24, r25
 202:	09 f0       	breq	.+2      	; 0x206 <getkeypad+0x154>
 204:	68 c0       	rjmp	.+208    	; 0x2d6 <getkeypad+0x224>
 206:	8f e0       	ldi	r24, 0x0F	; 15
 208:	97 e2       	ldi	r25, 0x27	; 39
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <getkeypad+0x158>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <getkeypad+0x15e>
 210:	00 00       	nop
			
			
		}
		_delay_ms(40);
	}
	if (isPressedD(6))
 212:	86 e0       	ldi	r24, 0x06	; 6
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 36 00 	call	0x6c	; 0x6c <isPressedD>
 21a:	89 2b       	or	r24, r25
 21c:	09 f4       	brne	.+2      	; 0x220 <getkeypad+0x16e>
 21e:	5e c0       	rjmp	.+188    	; 0x2dc <getkeypad+0x22a>
	{
		setPinD(0);
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 42 00 	call	0x84	; 0x84 <setPinD>
		resetPinD(1);
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 4d 00 	call	0x9a	; 0x9a <resetPinD>
		resetPinD(2);
 230:	82 e0       	ldi	r24, 0x02	; 2
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 4d 00 	call	0x9a	; 0x9a <resetPinD>
		
		if (isPressedD(6))
 238:	86 e0       	ldi	r24, 0x06	; 6
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 36 00 	call	0x6c	; 0x6c <isPressedD>
 240:	89 2b       	or	r24, r25
 242:	09 f0       	breq	.+2      	; 0x246 <getkeypad+0x194>
 244:	4e c0       	rjmp	.+156    	; 0x2e2 <getkeypad+0x230>
 246:	8f e0       	ldi	r24, 0x0F	; 15
 248:	97 e2       	ldi	r25, 0x27	; 39
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <getkeypad+0x198>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <getkeypad+0x19e>
 250:	00 00       	nop
			
			return 7;
			
		}
		_delay_ms(40);
		resetPinD(0);
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 4d 00 	call	0x9a	; 0x9a <resetPinD>
		setPinD(1);
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0e 94 42 00 	call	0x84	; 0x84 <setPinD>
		resetPinD(2);
 262:	82 e0       	ldi	r24, 0x02	; 2
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 4d 00 	call	0x9a	; 0x9a <resetPinD>
		
		if (isPressedD(6))
 26a:	86 e0       	ldi	r24, 0x06	; 6
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	0e 94 36 00 	call	0x6c	; 0x6c <isPressedD>
 272:	89 2b       	or	r24, r25
 274:	c9 f5       	brne	.+114    	; 0x2e8 <getkeypad+0x236>
 276:	8f e0       	ldi	r24, 0x0F	; 15
 278:	97 e2       	ldi	r25, 0x27	; 39
 27a:	01 97       	sbiw	r24, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <getkeypad+0x1c8>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <getkeypad+0x1ce>
 280:	00 00       	nop
			
			
		}
		_delay_ms(40);
		
		resetPinD(0);
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 4d 00 	call	0x9a	; 0x9a <resetPinD>
		resetPinD(1);
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	0e 94 4d 00 	call	0x9a	; 0x9a <resetPinD>
		setPinD(2);
 292:	82 e0       	ldi	r24, 0x02	; 2
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 42 00 	call	0x84	; 0x84 <setPinD>
		if (isPressedD(6))
 29a:	86 e0       	ldi	r24, 0x06	; 6
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 36 00 	call	0x6c	; 0x6c <isPressedD>
 2a2:	89 2b       	or	r24, r25
 2a4:	21 f5       	brne	.+72     	; 0x2ee <getkeypad+0x23c>
 2a6:	8f e0       	ldi	r24, 0x0F	; 15
 2a8:	97 e2       	ldi	r25, 0x27	; 39
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <getkeypad+0x1f8>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <getkeypad+0x1fe>
 2b0:	00 00       	nop
			
			
		}
		_delay_ms(40);
	}
	return '-';
 2b2:	8d e2       	ldi	r24, 0x2D	; 45
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	08 95       	ret
		resetPinD(2);
		
		if (isPressedD(4))
		{
			
			return 1;
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	08 95       	ret
		resetPinD(2);
		
		if (isPressedD(4))
		{
			
			return 2;
 2be:	82 e0       	ldi	r24, 0x02	; 2
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	08 95       	ret
		resetPinD(1);
		setPinD(2);
		if (isPressedD(4))
		{
			
			return 3;
 2c4:	83 e0       	ldi	r24, 0x03	; 3
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	08 95       	ret
		resetPinD(2);
		
		if (isPressedD(5))
		{
			
			return 4;
 2ca:	84 e0       	ldi	r24, 0x04	; 4
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	08 95       	ret
		resetPinD(2);
		
		if (isPressedD(5))
		{
			
			return 5;
 2d0:	85 e0       	ldi	r24, 0x05	; 5
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	08 95       	ret
		resetPinD(1);
		setPinD(2);
		if (isPressedD(5))
		{
			
			return 6;
 2d6:	86 e0       	ldi	r24, 0x06	; 6
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	08 95       	ret
			
			
		}
		_delay_ms(40);
	}
	return '-';
 2dc:	8d e2       	ldi	r24, 0x2D	; 45
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	08 95       	ret
		resetPinD(2);
		
		if (isPressedD(6))
		{
			
			return 7;
 2e2:	87 e0       	ldi	r24, 0x07	; 7
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	08 95       	ret
		resetPinD(2);
		
		if (isPressedD(6))
		{
			
			return 8;
 2e8:	88 e0       	ldi	r24, 0x08	; 8
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	08 95       	ret
		resetPinD(1);
		setPinD(2);
		if (isPressedD(6))
		{
			
			return 9;
 2ee:	89 e0       	ldi	r24, 0x09	; 9
 2f0:	90 e0       	ldi	r25, 0x00	; 0
			
		}
		_delay_ms(40);
	}
	return '-';
}
 2f2:	08 95       	ret

000002f4 <main>:
#include <util/delay.h>
#include "functions.h"

int main(void)
{
	DDRD |=(1<<0) |(1<<1) |(1<<2);
 2f4:	81 b3       	in	r24, 0x11	; 17
 2f6:	87 60       	ori	r24, 0x07	; 7
 2f8:	81 bb       	out	0x11, r24	; 17
	DDRA=0XFF;
 2fa:	8f ef       	ldi	r24, 0xFF	; 255
 2fc:	8a bb       	out	0x1a, r24	; 26

char num;
	/* Replace with your application code */
	while (1)
	{
		num=getkeypad();
 2fe:	0e 94 59 00 	call	0xb2	; 0xb2 <getkeypad>
		PORTA=num =='-' ? PORTA:num;
 302:	8d 32       	cpi	r24, 0x2D	; 45
 304:	09 f4       	brne	.+2      	; 0x308 <main+0x14>
 306:	8b b3       	in	r24, 0x1b	; 27
 308:	8b bb       	out	0x1b, r24	; 27
	}
 30a:	f9 cf       	rjmp	.-14     	; 0x2fe <main+0xa>

0000030c <_exit>:
 30c:	f8 94       	cli

0000030e <__stop_program>:
 30e:	ff cf       	rjmp	.-2      	; 0x30e <__stop_program>
